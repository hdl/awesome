<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tools:Synthesizers on Awesome resources for Hardware Description</title>
    <link>https://hdl.github.io/awesome/categories/toolssynthesizers/</link>
    <description>Recent content in Tools:Synthesizers on Awesome resources for Hardware Description</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://hdl.github.io/awesome/categories/toolssynthesizers/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GHDL</title>
      <link>https://hdl.github.io/awesome/items/ghdl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hdl.github.io/awesome/items/ghdl/</guid>
      <description>Open-source analyzer, compiler, simulator and (experimental) synthesizer for VHDL, a Hardware Description Language (HDL). GHDL is not an interpreter: it allows you to analyse and elaborate sources to generate machine code from your design. Native program execution is the only way for high speed simulation.
Full support for the 1987, 1993, 2002 versions of the IEEE 1076 VHDL standard, and partial for the latest 2008 revision. Partial support of PSL. Can write waveforms to a GHW, VCD or FST file.</description>
    </item>
    
    <item>
      <title>Icarus Verilog (iverilog)</title>
      <link>https://hdl.github.io/awesome/items/iverilog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hdl.github.io/awesome/items/iverilog/</guid>
      <description>Icarus Verilog is a Verilog simulation and synthesis tool. It operates as a compiler, compiling source code written in Verilog (IEEE-1364) into some target format. For batch simulation, the compiler can generate an intermediate form called vvp assembly. This intermediate form is executed by the vvp command. For synthesis, the compiler generates netlists in the desired format.</description>
    </item>
    
    <item>
      <title>Verilog to Routing (VTR)</title>
      <link>https://hdl.github.io/awesome/items/vtr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hdl.github.io/awesome/items/vtr/</guid>
      <description>&amp;ldquo;The Verilog-to-Routing (VTR) project is a world-wide collaborative effort to provide a open-source framework for conducting FPGA architecture and CAD research and development. The VTR design flow takes as input a Verilog description of a digital circuit, and a description of the target FPGA architecture.&amp;quot;
It performs:
 Elaboration &amp;amp; Synthesis (ODIN II) Logic Optimization &amp;amp; Technology Mapping (ABC) Packing, Placement, Routing &amp;amp; Timing Analysis (VPR)  &amp;ldquo;to generate FPGA speed and area results.</description>
    </item>
    
  </channel>
</rss>
