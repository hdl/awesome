<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>code-generator on Awesome resources for Hardware Description</title>
    <link>https://hdl.github.io/awesome/tags/code-generator/</link>
    <description>Recent content in code-generator on Awesome resources for Hardware Description</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://hdl.github.io/awesome/tags/code-generator/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RgGen</title>
      <link>https://hdl.github.io/awesome/items/rggen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hdl.github.io/awesome/items/rggen/</guid>
      <description>RgGen is a code generator tool to generate source files for configuration and status registers (CSR) from human readable register map specifications.
RgGen has following features:
 Generate following source files for CSR automatically from register map specifications  SystemVerilog/Verilog RTL VHDL RTL UVM register model (RAL) Markdown documents C header file   Register map specifications can be written in following format  YAML JSON TOML Spreadsheet (xlsx/xls/ods/csv/tsv) SiFive DUH Ruby SystemRDL  Now planning     Support standard bus protocols  AMBA APB AMBA AXI4-Lite Wishbone   Plugin feature  Add your own bit field types Add your own bus protocol    </description>
    </item>
    
    <item>
      <title>Synthesijer</title>
      <link>https://hdl.github.io/awesome/items/synthesijer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hdl.github.io/awesome/items/synthesijer/</guid>
      <description>Synthesijer is a high-level synthesis tool, which generates VHDL and Verilog HDL code from Java code. Synthesijer also provides a backend to generate VHDL/Verilog HDL, which helps to develop high-level synthesis tools and DSLs.
For example, prepare the following Java program,
/* Test.java */ public class Test{ public boolean flag; private int count = 0; public void run(){ while(true){ count++; if(count == 5000000){ count = 0; flag = !flag; } } } } and compile it with Synthesijer.</description>
    </item>
    
  </channel>
</rss>
